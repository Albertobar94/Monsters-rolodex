{"version":3,"sources":["components/card/card.component.jsx","components/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","componentDidMount","fetch","then","Response","json","users","setState","e","searchField","target","value","state","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAGaA,G,kBAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,YCHKC,EAAW,SAAAR,GACpB,OACI,qBAAKC,UAAU,YAAf,SACED,EAAMS,SAASC,KAAK,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAyBA,QAASA,GAAtBA,EAAQC,UCNnBM,EAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAErC,OACI,uBAAOZ,UAAc,SACda,KAAc,SACdF,YAAgBA,EAChBG,SAAgBF,KCmChBG,E,kDArCb,aAAe,IAAD,8BACZ,gBAQAC,kBAAoB,WAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAM,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEd,SAAUa,QAZlC,EAeZT,aAAe,SAACW,GACd,EAAKD,SAAU,CAACE,YAAaD,EAAEE,OAAOC,SAbxC,EAAKC,MAAQ,CACXnB,SAAU,GACVgB,YAAa,IALH,E,qDAmBF,IAAD,EAC2BI,KAAKD,MAA/BnB,EADD,EACCA,SAAUgB,EADX,EACWA,YACZK,EAAmBrB,EAASsB,QAAQ,SAAA3B,GAAO,OAAKA,EAAQE,KAAK0B,cAAcC,SAASR,EAAYO,kBAGtG,OACE,sBAAK/B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACEW,YAAe,kBACfC,aAAiBgB,KAAKhB,eAExB,cAAC,EAAD,CAAUJ,SAAUqB,W,GAhCZI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.507ea4a4.chunk.js","sourcesContent":["import React from \"react\";\nimport './card.styles.css'\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2`} />\n        <h2> {props.monster.name} </h2>\n        <p> {props.monster.email } </p>\n    </div>\n)","import React from 'react';\nimport './card-list.style.css';\nimport { Card } from './card/card.component';\n\nexport const CardList = props => {\n    return (\n        <div className=\"card-list\">\n        { props.monsters.map( monster =>  (\n            <Card key={ monster.id } monster={monster} />\n        ))}\n        </div>\n    )\n}\n\n","import React from 'react';\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n\n    return (\n        <input className   = 'search'\n               type        = \"search\"\n               placeholder = { placeholder }\n               onChange    = { handleChange }\n\n            />\n    )\n}","import { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n\n  }\n    componentDidMount = () => {\n      fetch('https://jsonplaceholder.typicode.com/users')\n        .then(Response => Response.json())\n        .then( users => this.setState({ monsters: users }))\n    }\n\n    handleChange = (e) => {\n      this.setState( {searchField: e.target.value} )\n    }\n\n    render() {\n      const { monsters, searchField } = this.state;\n      const filteredMonsters = monsters.filter( monster =>  monster.name.toLowerCase().includes(searchField.toLowerCase())\n\n      )\n      return (\n        <div className=\"App\">\n          <h1> Monsters Rolodex </h1>\n          <SearchBox \n            placeholder  = \"Search Monsters\"\n            handleChange = { this.handleChange }\n          />\n          <CardList monsters={filteredMonsters} />\n        </div>\n      );\n    }\n}\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}